{"version":3,"sources":["webpack:///./src/example-components/ImageCrop/ImageCropBasic/index.js","webpack:///./src/example-pages/ImageCrop/index.js"],"names":["className","Divider","LivePreviewExample","Component","constructor","props","super","this","state","imgSrc","stock3","image","imageLoaded","image1","imageL1oaded","image2","image2Loaded","image3","image3Loaded","image4","image4Loaded","image4BeforeLoaded","image4Values","handleImageLoaded","setState","handleBeforeImageLoad","handleClick","node","crop","handleChange","values","handleGetValues","render","Grid","container","spacing","item","xs","md","Card","CardContent","src","ref","onImgLoad","Button","color","onClick","alt","originX","originY","image1Loaded","disabled","ratio","width","height","fixedRatio","allowNewSelection","onChange","styles","source_img","WebkitFilter","filter","modal","opacity","backgroundColor","dotInner","borderColor","dotInnerCenterVertical","dotInnerCenterHorizontal","beforeImgLoad","titleHeading","titleDescription","sectionHeading","ImageCropBasic","ImageCrop"],"mappings":"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","file":"js/95.js","sourcesContent":["import React, { Fragment, Component } from 'react';\n\nimport { Grid, Card, CardContent, Button, Divider } from '@material-ui/core';\n\nimport stock3 from '../../../assets/images/stock-photos/stock-3.jpg';\n\nimport Cropper from 'react-cropper';\n\nclass LivePreviewExample extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imgSrc: stock3,\n      image: '',\n      imageLoaded: false,\n      image1: '',\n      imageL1oaded: false,\n      image2: '',\n      image2Loaded: false,\n      image3: '',\n      image3Loaded: false,\n      image4: '',\n      image4Loaded: false,\n      image4BeforeLoaded: false,\n      image4Values: ''\n    };\n  }\n\n  handleImageLoaded(state) {\n    this.setState({\n      [state + 'Loaded']: true\n    });\n  }\n\n  handleBeforeImageLoad(state) {\n    this.setState({\n      [state + 'BeforeLoaded']: true\n    });\n  }\n\n  handleClick(state) {\n    let node = this[state];\n    this.setState({\n      [state]: node.crop()\n    });\n  }\n\n  handleChange(state, values) {\n    this.setState({\n      [state + 'Values']: values\n    });\n  }\n\n  handleGetValues(state) {\n    let node = this[state];\n    this.setState({\n      [state + 'Values']: node.values()\n    });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Grid container spacing={4}>\n          <Grid item xs={12} md={6}>\n            <Card className=\"card-box mb-4\">\n              <div className=\"card-header\">Simple</div>\n              <CardContent className=\"p-3\">\n                <Cropper\n                  src={this.state.imgSrc}\n                  ref={ref => {\n                    this.image = ref;\n                  }}\n                  onImgLoad={() => this.handleImageLoaded('image')}\n                />\n                <Divider />\n                <div className=\"text-center\">\n                  {this.state.imageLoaded ? (\n                    <div className=\"text-center\">\n                      <Button\n                        color=\"primary\"\n                        onClick={() => this.handleClick('image')}>\n                        Crop Selection\n                      </Button>\n                    </div>\n                  ) : null}\n\n                  {this.state.image ? (\n                    <div>\n                      <Divider />\n                      <div>\n                        <h6>Cropped Result</h6>\n                      </div>\n                      <img\n                        className=\"after-img rounded\"\n                        src={this.state.image}\n                        alt=\"\"\n                      />\n                    </div>\n                  ) : null}\n                </div>\n              </CardContent>\n            </Card>\n            <Card className=\"card-box mb-4\">\n              <div className=\"card-header\">Predefined start X, Y origins</div>\n              <CardContent className=\"p-3\">\n                <Cropper\n                  src={this.state.imgSrc}\n                  originX={100}\n                  originY={100}\n                  ref={ref => {\n                    this.image1 = ref;\n                  }}\n                  onImgLoad={() => this.handleImageLoaded('image1')}\n                />\n                <Divider />\n                <div className=\"text-center\">\n                  {this.state.image1Loaded ? (\n                    <div className=\"text-center\">\n                      <Button\n                        color=\"primary\"\n                        onClick={() => this.handleClick('image1')}>\n                        Crop Selection\n                      </Button>\n                    </div>\n                  ) : null}\n                  {this.state.image1 ? (\n                    <div>\n                      <Divider />\n                      <div>\n                        <h6>Cropped Result</h6>\n                      </div>\n                      <img\n                        className=\"after-img rounded\"\n                        src={this.state.image1}\n                        alt=\"\"\n                      />\n                    </div>\n                  ) : null}\n                </div>\n              </CardContent>\n            </Card>\n            <Card className=\"card-box mb-4\">\n              <div className=\"card-header\">Disabled</div>\n              <CardContent className=\"p-3\">\n                <Cropper\n                  src={this.state.imgSrc}\n                  ref={ref => {\n                    this.image3 = ref;\n                  }}\n                  disabled\n                />\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Card className=\"card-box mb-4\">\n              <div className=\"card-header\">Predefined Ratio</div>\n              <CardContent className=\"p-3\">\n                <Cropper\n                  src={this.state.imgSrc}\n                  ratio={16 / 9}\n                  width={300}\n                  ref={ref => {\n                    this.image2 = ref;\n                  }}\n                  onImgLoad={() => this.handleImageLoaded('image2')}\n                />\n                <Divider />\n                {this.state.image2Loaded ? (\n                  <div className=\"text-center\">\n                    <Button\n                      color=\"primary\"\n                      onClick={() => this.handleClick('image2')}>\n                      Crop Selection\n                    </Button>\n                  </div>\n                ) : null}\n\n                {this.state.image2 ? (\n                  <div>\n                    <Divider />\n                    <div>\n                      <h6>Cropped Result</h6>\n                    </div>\n                    <img\n                      className=\"after-img rounded\"\n                      src={this.state.image2}\n                      alt=\"\"\n                    />\n                  </div>\n                ) : null}\n              </CardContent>\n            </Card>\n            <Card className=\"card-box mb-4\">\n              <div className=\"card-header\">Custom Styles</div>\n              <CardContent className=\"p-3\">\n                <Cropper\n                  src={this.state.imgSrc}\n                  width={200}\n                  height={500}\n                  originX={200}\n                  originY={50}\n                  fixedRatio={false}\n                  allowNewSelection={false}\n                  onChange={values => this.handleChange('image4', values)}\n                  styles={{\n                    source_img: {\n                      WebkitFilter: 'blur(3.5px)',\n                      filter: 'blur(3.5px)'\n                    },\n                    modal: {\n                      opacity: 0.5,\n                      backgroundColor: '#fff'\n                    },\n                    dotInner: {\n                      borderColor: '#ff0000'\n                    },\n                    dotInnerCenterVertical: {\n                      backgroundColor: '#ff0000'\n                    },\n                    dotInnerCenterHorizontal: {\n                      backgroundColor: '#ff0000'\n                    }\n                  }}\n                  ref={ref => {\n                    this.image4 = ref;\n                  }}\n                  onImgLoad={() => this.handleImageLoaded('image4')}\n                  beforeImgLoad={() => this.handleBeforeImageLoad('image4')}\n                />\n                <Divider />\n                <div className=\"text-center\">\n                  {this.state.image4Loaded ? (\n                    <Button\n                      color=\"primary\"\n                      onClick={() => this.handleClick('image4')}>\n                      Crop Selection\n                    </Button>\n                  ) : null}\n                  {this.state.image4 ? (\n                    <div>\n                      <Divider />\n                      <div>\n                        <h6>Cropped Result</h6>\n                      </div>\n                      <img\n                        className=\"after-img rounded\"\n                        src={this.state.image4}\n                        alt=\"\"\n                      />\n                    </div>\n                  ) : null}\n                </div>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Fragment>\n    );\n  }\n}\n\nexport default LivePreviewExample;\n","import React, { Fragment } from 'react';\n\nimport { PageTitle } from '../../layout-components';\n\nimport { ExampleWrapperSeamless } from '../../layout-components';\n\nimport ImageCropBasic from '../../example-components/ImageCrop/ImageCropBasic';\nexport default function ImageCrop() {\n  return (\n    <Fragment>\n      <PageTitle\n        titleHeading=\"Image Crop\"\n        titleDescription=\"You can easily crop and edit images with this React component.\"\n      />\n      <ExampleWrapperSeamless sectionHeading=\"Basic\">\n        <ImageCropBasic />\n      </ExampleWrapperSeamless>\n    </Fragment>\n  );\n}\n"],"sourceRoot":""}