{"version":3,"sources":["webpack:///./src/example-components/FormsWizard/FormsWizardBasic/index.js","webpack:///./src/example-components/FormsWizard/FormsWizardVertical/index.js","webpack:///./src/example-pages/FormsWizard/index.js"],"names":["useStyles","makeStyles","theme","root","width","button","marginRight","spacing","backButton","completed","display","instructions","marginTop","marginBottom","Typography","variant","Divider","LivePreviewExample","classes","activeStep","setActiveStep","React","useState","setCompleted","Set","skipped","setSkipped","steps","totalSteps","length","isStepOptional","step","skippedSteps","size","completedSteps","allStepsCompleted","handleNext","newActiveStep","findIndex","i","has","handleStep","isStepComplete","className","Stepper","alternativeLabel","nonLinear","map","label","index","stepProps","buttonProps","optional","Step","key","StepButton","onClick","Button","getStepContent","disabled","prevActiveStep","color","Error","prevSkipped","newSkipped","values","add","newCompleted","actionsContainer","resetContainer","padding","handleBack","orientation","StepLabel","StepContent","Paper","square","elevation","titleHeading","titleDescription","Grid","container","item","xs","lg","sectionHeading","FormsWizardBasic","FormsWizardVertical","FormsWizard"],"mappings":"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","file":"js/83.js","sourcesContent":["import React, { Fragment } from 'react';\n\nimport { Typography, Button, Divider } from '@material-ui/core';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  button: {\n    marginRight: theme.spacing(1)\n  },\n  backButton: {\n    marginRight: theme.spacing(1)\n  },\n  completed: {\n    display: 'inline-block'\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(4)\n  }\n}));\n\nfunction getSteps() {\n  return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return 'Step 1: Select campaign settings...';\n    case 1:\n      return 'Step 2: What is an ad group anyways?';\n    case 2:\n      return 'Step 3: This is the bit I really care about!';\n    default:\n      return 'Unknown step';\n  }\n}\n\nconst LivePreviewExample = () => {\n  const classes = useStyles();\n\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [completed, setCompleted] = React.useState(new Set());\n  const [skipped, setSkipped] = React.useState(new Set());\n  const steps = getSteps();\n\n  const totalSteps = () => {\n    return getSteps().length;\n  };\n\n  const isStepOptional = step => {\n    return step === 1;\n  };\n\n  const handleSkip = () => {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setSkipped(prevSkipped => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  const skippedSteps = () => {\n    return skipped.size;\n  };\n\n  const completedSteps = () => {\n    return completed.size;\n  };\n\n  const allStepsCompleted = () => {\n    return completedSteps() === totalSteps() - skippedSteps();\n  };\n\n  const isLastStep = () => {\n    return activeStep === totalSteps() - 1;\n  };\n\n  const handleNext = () => {\n    const newActiveStep =\n      isLastStep() && !allStepsCompleted()\n        ? // It's the last step, but not all steps have been completed\n          // find the first step that has been completed\n          steps.findIndex((step, i) => !completed.has(i))\n        : activeStep + 1;\n\n    setActiveStep(newActiveStep);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleStep = step => () => {\n    setActiveStep(step);\n  };\n\n  const handleComplete = () => {\n    const newCompleted = new Set(completed);\n    newCompleted.add(activeStep);\n    setCompleted(newCompleted);\n\n    if (completed.size !== totalSteps() - skippedSteps()) {\n      handleNext();\n    }\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n    setCompleted(new Set());\n    setSkipped(new Set());\n  };\n\n  const isStepSkipped = step => {\n    return skipped.has(step);\n  };\n\n  function isStepComplete(step) {\n    return completed.has(step);\n  }\n\n  return (\n    <Fragment>\n      <div className={classes.root}>\n        <Stepper alternativeLabel nonLinear activeStep={activeStep}>\n          {steps.map((label, index) => {\n            const stepProps = {};\n            const buttonProps = {};\n            if (isStepOptional(index)) {\n              buttonProps.optional = (\n                <Typography variant=\"caption\">Optional</Typography>\n              );\n            }\n            if (isStepSkipped(index)) {\n              stepProps.completed = false;\n            }\n            return (\n              <Step key={label} {...stepProps}>\n                <StepButton\n                  onClick={handleStep(index)}\n                  completed={isStepComplete(index)}\n                  {...buttonProps}>\n                  {label}\n                </StepButton>\n              </Step>\n            );\n          })}\n        </Stepper>\n        <div>\n          {allStepsCompleted() ? (\n            <div>\n              <Typography className={classes.instructions}>\n                All steps completed - you&apos;re finished\n              </Typography>\n              <Button onClick={handleReset}>Reset</Button>\n            </div>\n          ) : (\n            <div>\n              <Divider />\n              <div className=\"py-4\">\n                <Typography className={classes.instructions}>\n                  {getStepContent(activeStep)}\n                </Typography>\n                <div>\n                  <Button\n                    disabled={activeStep === 0}\n                    onClick={handleBack}\n                    className={classes.button}>\n                    Back\n                  </Button>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleNext}\n                    className={classes.button}>\n                    Next\n                  </Button>\n                  {isStepOptional(activeStep) && !completed.has(activeStep) && (\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={handleSkip}\n                      className={classes.button}>\n                      Skip\n                    </Button>\n                  )}\n\n                  {activeStep !== steps.length &&\n                    (completed.has(activeStep) ? (\n                      <Typography\n                        variant=\"caption\"\n                        className={classes.completed}>\n                        Step {activeStep + 1} already completed\n                      </Typography>\n                    ) : (\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={handleComplete}>\n                        {completedSteps() === totalSteps() - 1\n                          ? 'Finish'\n                          : 'Complete Step'}\n                      </Button>\n                    ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default LivePreviewExample;\n","import React, { Fragment } from 'react';\n\nimport { Paper, Typography, Button } from '@material-ui/core';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1)\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2)\n  },\n  resetContainer: {\n    padding: theme.spacing(3)\n  }\n}));\n\nfunction getSteps() {\n  return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return (\n        'For each ad campaign that you create, you can control how much\\n' +\n        \"              you're willing to spend on clicks and conversions, which networks\\n\" +\n        '              and geographical locations you want your ads to show on, and more.'\n      );\n    case 1:\n      return 'An ad group contains one or more ads which target a shared set of keywords.';\n    case 2:\n      return (\n        'Try out different ad text to see what brings in the most customers\\n' +\n        'and learn how to enhance your ads using features like ad extensions.\\n' +\n        'If you run into any problems with your ads, find out how to tell if' +\n        \"they're running and how to resolve approval issues.\"\n      );\n    default:\n      return 'Unknown step';\n  }\n}\n\nconst LivePreviewExample = () => {\n  const classes = useStyles();\n\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = getSteps();\n\n  const handleNext = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n  return (\n    <Fragment>\n      <div className={classes.root}>\n        <Stepper activeStep={activeStep} orientation=\"vertical\">\n          {steps.map((label, index) => (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n              <StepContent>\n                <Typography>{getStepContent(index)}</Typography>\n                <div className={classes.actionsContainer}>\n                  <div>\n                    <Button\n                      disabled={activeStep === 0}\n                      onClick={handleBack}\n                      className={classes.button}>\n                      Back\n                    </Button>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={handleNext}\n                      className={classes.button}>\n                      {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                    </Button>\n                  </div>\n                </div>\n              </StepContent>\n            </Step>\n          ))}\n        </Stepper>\n        {activeStep === steps.length && (\n          <Paper square elevation={0} className={classes.resetContainer}>\n            <Typography>All steps completed - you&apos;re finished</Typography>\n            <Button onClick={handleReset} className={classes.button}>\n              Reset\n            </Button>\n          </Paper>\n        )}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default LivePreviewExample;\n","import React, { Fragment } from 'react';\n\nimport { PageTitle } from '../../layout-components';\nimport { Grid } from '@material-ui/core';\n\nimport { ExampleWrapperSimple } from '../../layout-components';\n\nimport FormsWizardBasic from '../../example-components/FormsWizard/FormsWizardBasic';\nimport FormsWizardVertical from '../../example-components/FormsWizard/FormsWizardVertical';\nexport default function FormsWizard() {\n  return (\n    <Fragment>\n      <PageTitle\n        titleHeading=\"Wizard\"\n        titleDescription=\"Easily create beautiful form multi step wizards or presentation steps.\"\n      />\n\n      <Grid container spacing={4}>\n        <Grid item xs={12} lg={6}>\n          <ExampleWrapperSimple sectionHeading=\"Horizontal Stepper\">\n            <FormsWizardBasic />\n          </ExampleWrapperSimple>\n        </Grid>\n        <Grid item xs={12} lg={6}>\n          <ExampleWrapperSimple sectionHeading=\"Vertical Stepper\">\n            <FormsWizardVertical />\n          </ExampleWrapperSimple>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n}\n"],"sourceRoot":""}